#!/local/perl/bin/perl

=head1 NAME

observe_junk -- observe space junk from NASA tracking file

=head1 SYNOPSIS

    observe_junk --data data.txt --msb msb.xml --duration DURATION [--cycles N]

=head1 OPTIONS

=over 4

=item --data

The file containing the tracking information.

=item --msb

The file containing the MSB to observe.

=item --duration DURATION

Specify the duration of each observation in the file in seconds.
(They must all be the same length.)

=item --cycles N

The number of times to observe the MSB.   The script will exit
after the Nth observation is complete.

=back

=cut

use strict;

use Getopt::Long;

use DRAMA;
use Queue::Constants;

use UKIRT::JunkTrack;

# Handle command line options.
my ($data_filename, $msb_filename, $duration, $cycles);

GetOptions(
    'data=s'        => \$data_filename,
    'msb=s'         => \$msb_filename,
    'duration=i'    => \$duration,
    'cycles=i'      => \$cycles,
);

die 'Data file not specified' unless defined $data_filename;
die 'MSB file not specified' unless defined $msb_filename;
die 'Observation duration not specified' unless defined $duration;

die "Data file $data_filename does not exist" unless -e $data_filename;
die "MSB file $msb_filename does not exist" unless -e $msb_filename;

# Initialize DRAMA.
DPerlInit('JUNKTRACK');

# Set up space junk tracker object.
my $tracker = new UKIRT::JunkTrack(
        data => $data_filename,
        msb => $msb_filename,
        duration => $duration,
    );

# Start first observation.
$tracker->observe();
my $i = 1; # Set counter to one observation done.

# Set up monitor.
my %MON;
monitor('OCSQUEUE', 'START', 'ALERT', {
    -monitorvar => \%MON,
    -cvtsub => \&my_cb,
    -success => sub {
        print STDERR "OCSQUEUE ALERT monitor started\n";
    },
    -complete => sub {
        print STDERR "OCSQUEUE ALERT monitor complete\n";
    },
    -error => sub {
        print STDERR "ERROR: OCSQUEUE ALERT monitor error\n";
    },
});

# Handle DRAMA events.
my $status = new DRAMA::Status();
Dits::MainLoop($status);

# If the queue becomes empty, start another observation.
sub my_cb {
    my ($p, $v) = @_;

    print "OCSQUEUE ALERT MONITOR received $p = $v\n";

    if ($p eq 'ALERT' and $v == Queue::Constants::QSTATE__EMPTY) {
        if ((not defined $cycles) or ($i < $cycles)) {
            $tracker->observe();
            $i ++;
        }
        else {
            # A sufficient number of cycles has been observed, so
            # exit now.
            my $status = new DRAMA::Status();
            Dits::PutRequest(Dits::REQ_EXIT, $status);
        }
    }
}
